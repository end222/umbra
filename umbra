#!/usr/bin/ruby

#
# Umbra AUR helper
# File: umbra
# Author: end222
#

require 'colorize'

# Declaration of constants
Version="0.1-alpha"
AUR_url="https://aur.archlinux.org/"

# Declaration of global variables
@quiet=false

# Evaluate the options given
def evaluate_options(options)
	i = 0
	while i < options.length
		if options[i] == "--noconfirm"
			@quiet = true
		else
			puts "Option #{options[i]} not recognized"
		end
		i += 1
	end
end

# Show some info about the package that will be installed
def show_pkg_info(package)
	dependencies = []
       	opt = []
	aur_deps = []
	name, version, release, description = ""
	puts
	puts "Package that will be installed".yellow
	puts "==============================".yellow

	# Get basic information about the package from the PKGBUILD file
	File.readlines("/tmp/umbra/#{package}/.SRCINFO").each {
		|line| case line.split("=")[0].delete_prefix("\t").strip
		when "pkgbase"
			name = line.split("=")[1].strip
		when "pkgver"
			version = line.split("=")[1].strip
		when "pkgrel"
			release = line.split("=")[1].strip
		when "pkgdesc"
			description = line.split("=")[1]
		when "depends"
			dependencies << line.split("=")[1].strip.split(" ")[0].split("<")[0].split(">")[0].split(">")[0]
		when "optdepends"
			opt << line.split("=")[1].strip
		end
	}

	# Show dependencies
	puts "Name: #{name}"
	puts "Version: #{version}"
	puts "Release: #{release}"
	puts "Description: #{description}"
	if dependencies.length > 1
		puts
		puts "Dependencies".yellow
		puts "============".yellow
		i = 0
		while i < dependencies.length
			print "#{dependencies[i]} "
			# Check what packages are available in the AUR
			code=%x(curl -Is #{AUR_url}packages/#{dependencies[i].split(" ")[0].split("<")[0].split(">")[0].split(">")[0]} | head -1 | cut -d" " -f2).chomp
			if code != "404"
				puts "(Will be installed from the AUR)"
				aur_deps << dependencies[i].split(" ")[0]
			else
				puts
			end
			i += 1
		end
	end

	# Show optional dependencies
	if opt.length > 1
		puts
		puts "Optional dependencies".yellow
		puts "=====================".yellow
		i = 0
		while i < opt.length
			puts "#{opt[i]}"
			i += 1
		end
	end
	puts

	# Start installing the dependencies that are from the AUR
	while aur_deps.length > 0
		print ">> ".magenta
		puts "Installing dependencies that are only available in the AUR"
		pkg_install(aur_deps[0])
		aur_deps.delete_at(0)
	end
end

# Help page for umbra
def usage_help()
	puts
	puts "Umbra help page".yellow
	puts "===============".yellow
	puts "Usage: umbra <operation> [package_name]"
	puts
	puts "Operations:"
	puts "-S: install a package"
	puts "-Syu: upgrade repositories and packages, including the ones from the AUR"
	puts "-R: remove a package"
	puts "-Rs: remove a package and its dependencies"
	puts "-U: installs a local package, given the directory where the PKGBUILD file is located"
	puts "-h, --help: show this help page"
	puts "-v: print version of the program"
	puts
	puts "Options:"
	puts "--noconfirm: install the package without asking any questions to the user" 
end

def pkg_install(package)
	system("rm -rf /tmp/umbra/#{package}")
	code=%x(curl -Is #{AUR_url}packages/#{package} | head -1 | cut -d" " -f2).chomp
	if code == "404"
		print "Error: ".red
		puts "The package #{package} was not found in the AUR"
		if !@quiet
			print ">> ".magenta
			print "Do you want to try to install it from the official repositories? (y/n): "
			notRecognized = true
			while notRecognized
				case $stdin.gets.chomp
				when "y", "Y"
					system("sudo pacman -S #{package}")
					notRecognized = false
					exit 0
				when "n", "N"
					notRecognized = false
					exit 0
				else
					print ">> ".magenta
					print "The answer was not recognized, please enter 'y' or 'n': "
				end
			end
		else
			system("sudo pacman -S --noconfirm #{package}")
		end
	end
	system("git clone #{AUR_url}#{package}.git /tmp/umbra/#{package}")
	show_pkg_info(package)	
	if !@quiet
		print ">> ".magenta
		print "Do you want to install #{package}? (y/n): "
		notRecognized = true
		while notRecognized
			case $stdin.gets.chomp
			when "y", "Y"
				notRecognized = false
			when "n", "N"
				notRecognized = false
				exit 0
			else
				print ">> ".magenta
				print "The answer was not recognized, please enter 'y' or 'n': "
			end
		end
	end
	if !@quiet
		print ">> ".magenta
		print "Do you want to modify PKGBUILD? (y/n): "
		notRecognized = true
		while notRecognized
			case $stdin.gets.chomp
			when "y", "Y"
				print ">> ".magenta
				print "Choose an editor: "
				editor = $stdin.gets.chomp
				system("#{editor} /tmp/umbra/#{package}/PKGBUILD")
				notRecognized = false
			when "n", "N"
				notRecognized = false
			else
				print ">> ".magenta
				print "The answer was not recognized, please enter 'y' or 'n': "
			end
		end
	end
	# s: SyncDeps
	# i: Install when finished
	# c: Clean when finished
	system("cd /tmp/umbra/#{package} && makepkg -sic")

	# Cleaning up
	system("rm -rf /tmp/umbra/#{package}")
end

# Installs a package given the directory where its PKGBUILD is located
def pkg_local_install(directory)
	# The build of the package will be done in /tmp
	system("cp -rf #{directory} /tmp/umbra/local_install")
	show_pkg_info(package)	
		if !@quiet
			print ">> ".magenta
			print "Do you want to install #{package}? (y/n): "
			notRecognized = true
			while notRecognized
				case $stdin.gets.chomp
				when "y", "Y"
					notRecognized = false
				when "n", "N"
					notRecognized = false
					exit 0
				else
					print ">> ".magenta
					print "The answer was not recognized, please enter 'y' or 'n': "
				end
			end
		end
		if !@quiet
			print ">> ".magenta
			print "Do you want to modify PKGBUILD? (y/n): "
			notRecognized = true
			while notRecognized
				case $stdin.gets.chomp
				when "y", "Y"
					print ">> ".magenta
					print "Choose an editor: "
					editor = $stdin.gets.chomp
					system("#{editor} /tmp/umbra/local_install/PKGBUILD")
					notRecognized = false
				when "n", "N"
					notRecognized = false
				else
					print ">> ".magenta
					print "The answer was not recognized, please enter 'y' or 'n': "
				end
			end
		end

		# s: SyncDeps
		# i: Install when finished
		# c: Clean when finished
		system("cd /tmp/umbra/local_install && makepkg -sic")

		# Cleaning up
		system("rm -rf /tmp/umbra/local_install")
end

def upgrade_all()
	# TODO: Update AUR packages too
	puts "Updating official packages..."
	system("sudo pacman -Syu")
end

def remove_pkganddeps(package)
	system("sudo pacman -Rs #{package}")
end

def remove_pkg(package)
	system("sudo pacman -R #{package}")
end

trap "SIGINT" do
	puts
	print ">> ".magenta
	puts "Exiting Umbra..."

	#Cleaning up
	system("rm -rf /tmp/umbra")
	exit 1
end

# Create directory in tmp to store files during installation
system("mkdir -p /tmp/umbra")

if ARGV.length >= 1
	# Install new package
	case ARGV[0]
	when "-S"
		if ARGV.length < 2
			puts "Usage: umbra -S <package_name>"
		else
			i = 1
			packages = []
			options = []
			while i < ARGV.length
				if ARGV[i][0] != "-"
					packages << ARGV[i]
				elsif ARGV[i][1] == "-"
					options << ARGV[i]
				end
				i += 1
			end
			
			evaluate_options(options)

			i = 0
			while i < packages.length
				pkg_install(packages[i])
				i += 1
			end
		end
	when "-Syu"
		upgrade_all()
	when "-Rs"
		if ARGV.length < 2
			puts "Usage: umbra -Rs <package_name>"
		else
			while i < ARGV.length
				if ARGV[i][0] != "-"
					packages << ARGV[i]
				elsif ARGV[i][1] == "-"
					options << ARGV[i]
				end
			end

			evaluate_options(options)

			i = 0
			while i < packages.length
				remove_pkganddeps(packages[i])
				i += 1
			end

		end

	when "-R"
		if ARGV.length < 2
			puts "Usage: umbra -R <package_name>"
		else
			i=1
			while i < ARGV.length
				remove_pkg(ARGV[i] )
				i += 1
			end
		end
	when "-U"
		if ARGV.length < 2
			puts "Usage: umbra -U <directory>"
		else
			while i < ARGV.length
				if ARGV[i][0] != "-"
					packages << ARGV[i]
				elsif ARGV[i][1] == "-"
					options << ARGV[i]
				end
			end

			evaluate_options(options)
			if File.exists("#{directory}/PKGBUILD")
				pkg_local_install()
			else
				print ">> ".magenta
				puts "#{directory} does not contain a PKGBUILD file"
			end
		end

	# Show help page
	when "-h", "--help"
		usage_help()
	# Show package version
	when "-v"
		puts "Umbra AUR helper, version #{Version}"
		puts "Developed by end222"
	else
		puts "Operation not recognized"
	end
else
	puts "No operation code was given"
	puts "Usage: umbra <operation> [package_name]"
end

# Cleaning up
system("rm -rf /tmp/umbra")
